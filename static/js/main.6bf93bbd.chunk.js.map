{"version":3,"sources":["SearchResult.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","props","result","className","target","href","word","rel","defs","length","App","onChange","e","terms","value","split","lastWord","fetch","then","res","json","words","setState","searchResults","state","console","log","this","Helmet","placeholder","map","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAEe,SAASA,EAAaC,GAAQ,IACnCC,EAAWD,EAAXC,OACR,OACE,yBAAKC,UAAU,mBACb,uBACEC,OAAO,SACPC,KAAI,4CAAuCH,EAAOI,MAClDH,UAAU,OACVI,IAAI,2BAEHL,EAAOI,MAEV,yBAAKH,UAAU,cACZD,EAAOM,MAAQN,EAAOM,KAAKC,OAAS,GAAKP,EAAOM,KAAK,K,ICVzCE,E,YACnB,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAORU,SAAW,SAAAC,GACT,IAAMC,EAAQD,EAAER,OAAOU,MAAMC,MAAM,KAC7BC,EAAWH,EAAMA,EAAMJ,OAAS,GAEtCQ,MAAM,yCAAD,OAA0CD,EAA1C,UACFE,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SAEZF,KAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEC,cAAeF,OAbhD,EAAKG,MAAQ,CACXD,cAAe,IAJA,E,sEAqBjB,OADAE,QAAQC,IAAIC,KAAKH,MAAMD,eAErB,oCACE,kBAACK,EAAA,OAAD,KACE,0BACEvB,KAAK,8DACLE,IAAI,gBAGR,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,SAAf,gBACA,2BACEA,UAAU,cACV0B,YAAY,wCACZlB,SAAUgB,KAAKhB,WAEjB,yBAAKR,UAAU,oBACZwB,KAAKH,MAAMD,cAAcO,IAAI,SAAC5B,EAAQ6B,GAAT,OAC5B,kBAAC/B,EAAD,CAAcE,OAAQA,a,GAvCH8B,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.6bf93bbd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function SearchResult(props) {\r\n  const { result } = props;\r\n  return (\r\n    <div className=\"resultContainer\">\r\n      <a\r\n        target=\"_blank\"\r\n        href={`https://www.dictionary.com/browse/${result.word}`}\r\n        className=\"word\"\r\n        rel=\"nooopener noreferer    \"\r\n      >\r\n        {result.word}\r\n      </a>\r\n      <div className=\"definition\">\r\n        {result.defs && result.defs.length > 0 && result.defs[0]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./App.css\";\nimport SearchResult from \"./SearchResult\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: []\n    };\n  }\n\n  onChange = e => {\n    const terms = e.target.value.split(\" \");\n    const lastWord = terms[terms.length - 1];\n\n    fetch(`http://api.datamuse.com/words?rel_rhy=${lastWord}&md=d`)\n      .then(res => {\n        return res.json();\n      })\n      .then(words => this.setState({ searchResults: words }));\n  };\n\n  render() {\n    console.log(this.state.searchResults);\n    return (\n      <>\n        <Helmet>\n          <link\n            href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\"\n            rel=\"stylesheet\"\n          />\n        </Helmet>\n        <div className=\"container\">\n          <div className=\"title\">Find a Rhyme</div>\n          <input\n            className=\"searchInput\"\n            placeholder=\"start typing to find words that rhyme\"\n            onChange={this.onChange}\n          />\n          <div className=\"resultsContainer\">\n            {this.state.searchResults.map((result, id) => (\n              <SearchResult result={result} />\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}